"""add development plan geogprahy types

Revision ID: da415eb44cbb
Revises: e601e0d13cbf
Create Date: 2023-10-13 12:20:58.903438

"""
import codecs
from contextlib import closing
import csv
from datetime import datetime
from alembic import op
import requests
import sqlalchemy as sa

from sqlalchemy.orm.session import Session

from application.models import DocumentType, DevelopmentPlanGeographyType


# revision identifiers, used by Alembic.
revision = "da415eb44cbb"
down_revision = "e601e0d13cbf"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "development_plan_geography_type",
        sa.Column("prefix", sa.Text(), nullable=True),
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("reference"),
    )
    with op.batch_alter_table("development_plan_geography", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "development_plan_geography_type_reference", sa.Text(), nullable=True
            )
        )
        batch_op.create_foreign_key(
            "development_plan_geography_type_fk",
            "development_plan_geography_type",
            ["development_plan_geography_type_reference"],
            ["reference"],
        )
        batch_op.drop_column("development_plan_geography_type")

    session = Session(bind=op.get_bind())
    doc_types_url = "https://dluhc-datasets.planning-data.dev/dataset/development-plan-document-type.csv"
    geo_types_url = "https://dluhc-datasets.planning-data.dev/dataset/development-plan-geography-type.csv"

    with closing(requests.get(doc_types_url, stream=True)) as r:
        reader = csv.DictReader(
            codecs.iterdecode(r.iter_lines(), encoding="utf-8"), delimiter=","
        )

        for row in reader:
            reference = row["reference"]
            doc_type = session.query(DocumentType).get(reference)
            if doc_type is None:
                entry_date = (
                    datetime.datetime.strptime(row["entry-date"], "%Y-%m-%d").date()
                    if row["entry-date"]
                    else None
                )
                print("adding doc type", reference, row["name"])
                doc_type = DocumentType(
                    reference=reference,
                    name=row["name"],
                    entry_date=entry_date,
                )

                session.add(doc_type)
                session.commit()

    with closing(requests.get(geo_types_url, stream=True)) as r:
        reader = csv.DictReader(
            codecs.iterdecode(r.iter_lines(), encoding="utf-8"), delimiter=","
        )

        for row in reader:
            reference = row["reference"]
            geo_type = session.query(DevelopmentPlanGeographyType).get(reference)
            if geo_type is None:
                print("adding geography type", reference, row["name"])
                notes = row.get("notes")
                entry_date = (
                    datetime.datetime.strptime(row["entry-date"], "%Y-%m-%d").date()
                    if row["entry-date"]
                    else None
                )
                geo_type = DevelopmentPlanGeographyType(
                    prefix=row["prefix"],
                    reference=reference,
                    name=row["name"],
                    notes=notes if notes else None,
                    entry_date=entry_date,
                )

                session.add(geo_type)
                session.commit()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("development_plan_geography", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "development_plan_geography_type",
                sa.TEXT(),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.drop_constraint(
            "development_plan_geography_type_fk", type_="foreignkey"
        )
        batch_op.drop_column("development_plan_geography_type_reference")

    op.drop_table("development_plan_geography_type")
    # ### end Alembic commands ###
