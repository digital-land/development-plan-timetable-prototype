"""rebase migrations

Revision ID: 85e0adac64dd
Revises:
Create Date: 2024-09-06 14:48:45.188737

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "624ea9cb3155"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "development_plan",
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("development_plan_type", sa.Text(), nullable=True),
        sa.Column("period_start_date", sa.Integer(), nullable=True),
        sa.Column("period_end_date", sa.Integer(), nullable=True),
        sa.Column("documentation_url", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("adopted_date", sa.String(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("reference"),
    )
    op.create_table(
        "development_plan_event_type",
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("reference"),
    )
    op.create_table(
        "development_plan_geography_type",
        sa.Column("prefix", sa.Text(), nullable=True),
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("reference"),
    )
    op.create_table(
        "development_plan_type",
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("reference"),
    )
    op.create_table(
        "document_type",
        sa.Column("prefix", sa.Text(), nullable=True),
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("reference"),
    )
    op.create_table(
        "organisation",
        sa.Column("organisation", sa.Text(), nullable=False),
        sa.Column("addressbase_custodian", sa.Text(), nullable=True),
        sa.Column("billing_authority", sa.Text(), nullable=True),
        sa.Column("census_area", sa.Text(), nullable=True),
        sa.Column("combined_authority", sa.Text(), nullable=True),
        sa.Column("company", sa.Text(), nullable=True),
        sa.Column("entity", sa.BigInteger(), nullable=True),
        sa.Column("esd_inventory", sa.Text(), nullable=True),
        sa.Column("local_authority_type", sa.Text(), nullable=True),
        sa.Column("local_resilience_forum", sa.Text(), nullable=True),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("official_name", sa.Text(), nullable=True),
        sa.Column("opendatacommunities_uri", sa.Text(), nullable=True),
        sa.Column("parliament_thesaurus", sa.Text(), nullable=True),
        sa.Column("prefix", sa.Text(), nullable=True),
        sa.Column("reference", sa.Text(), nullable=True),
        sa.Column("region", sa.Text(), nullable=True),
        sa.Column("shielding_hub", sa.Text(), nullable=True),
        sa.Column("statistical_geography", sa.Text(), nullable=True),
        sa.Column("twitter", sa.Text(), nullable=True),
        sa.Column("website", sa.Text(), nullable=True),
        sa.Column("wikidata", sa.Text(), nullable=True),
        sa.Column("wikipedia", sa.Text(), nullable=True),
        sa.Column("geometry", sa.Text(), nullable=True),
        sa.Column("geojson", sa.JSON(), nullable=True),
        sa.Column("point", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("organisation"),
    )
    op.create_table(
        "development_plan_document",
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("document_type", sa.Text(), nullable=True),
        sa.Column("documentation_url", sa.Text(), nullable=True),
        sa.Column("document_url", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("development_plan_reference", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(
            ["development_plan_reference"],
            ["development_plan.reference"],
        ),
        sa.PrimaryKeyConstraint("reference"),
    )
    op.create_table(
        "development_plan_event",
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("development_plan_event", sa.Text(), nullable=True),
        sa.Column("event_date", sa.String(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("development_plan_event_type_reference", sa.Text(), nullable=True),
        sa.Column("development_plan_reference", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(
            ["development_plan_event_type_reference"],
            ["development_plan_event_type.reference"],
        ),
        sa.ForeignKeyConstraint(
            ["development_plan_reference"],
            ["development_plan.reference"],
        ),
        sa.PrimaryKeyConstraint("reference"),
    )
    op.create_table(
        "development_plan_geography",
        sa.Column("reference", sa.Text(), nullable=False),
        sa.Column("prefix", sa.Text(), nullable=True),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("geometry", sa.Text(), nullable=True),
        sa.Column("geojson", sa.JSON(), nullable=True),
        sa.Column("point", sa.Text(), nullable=True),
        sa.Column(
            "development_plan_geography_type_reference", sa.Text(), nullable=True
        ),
        sa.Column("development_plan_reference", sa.Text(), nullable=True),
        sa.Column("entry_date", sa.Date(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(
            ["development_plan_geography_type_reference"],
            ["development_plan_geography_type.reference"],
        ),
        sa.ForeignKeyConstraint(
            ["development_plan_reference"],
            ["development_plan.reference"],
        ),
        sa.PrimaryKeyConstraint("reference"),
    )
    op.create_table(
        "development_plan_organisation",
        sa.Column("development_plan", sa.Text(), nullable=True),
        sa.Column("organisation", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["development_plan"],
            ["development_plan.reference"],
        ),
        sa.ForeignKeyConstraint(
            ["organisation"],
            ["organisation.organisation"],
        ),
    )
    op.create_table(
        "development_plan_document_organisation",
        sa.Column("development_plan_document", sa.Text(), nullable=True),
        sa.Column("organisation", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["development_plan_document"],
            ["development_plan_document.reference"],
        ),
        sa.ForeignKeyConstraint(
            ["organisation"],
            ["organisation.organisation"],
        ),
    )
    op.create_table(
        "development_plan_event_organisation",
        sa.Column("development_plan_event", sa.Text(), nullable=True),
        sa.Column("organisation", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["development_plan_event"],
            ["development_plan_event.reference"],
        ),
        sa.ForeignKeyConstraint(
            ["organisation"],
            ["organisation.organisation"],
        ),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("development_plan_event_organisation")
    op.drop_table("development_plan_document_organisation")
    op.drop_table("development_plan_organisation")
    op.drop_table("development_plan_geography")
    op.drop_table("development_plan_event")
    op.drop_table("development_plan_document")
    op.drop_table("organisation")
    op.drop_table("document_type")
    op.drop_table("development_plan_type")
    op.drop_table("development_plan_geography_type")
    op.drop_table("development_plan_event_type")
    op.drop_table("development_plan")
    # ### end Alembic commands ###
